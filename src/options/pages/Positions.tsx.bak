import * as React from "react";
import Box from "@mui/material/Box";
import Typography from "@mui/material/Typography";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import Chip from "@mui/material/Chip";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import Grid from "@mui/material/Grid";
import TableSortLabel from "@mui/material/TableSortLabel";
import { Trade, Position } from "../models/types";
import { PositionManager } from "../models/positionManager";
import { xanoApi } from "../../services/xanoApi";

export default function Positions() {
  const tradesRef = React.useRef<Trade[] | null>(null);
  const [positions, setPositions] = React.useState<Position[]>([]);
  const [allPositions, setAllPositions] = React.useState<Position[]>([]);
  const [loading, setLoading] = React.useState<boolean>(true);
  const [error, setError] = React.useState<string | null>(null);
  const [sortBy, setSortBy] = React.useState<keyof Position>('ticker');
  const [sortOrder, setSortOrder] = React.useState<'asc' | 'desc'>('asc');
  const [yearFilter, setYearFilter] = React.useState<string>('All');
  const [symbolFilter, setSymbolFilter] = React.useState<string>('All');

React.useEffect(() => {
    if (tradesRef.current) {
      const positionManager = new PositionManager(tradesRef.current);
      const calculatedPositions = positionManager.getPositions();
      setPositions(calculatedPositions);
      setAllPositions(calculatedPositions);
      setLoading(false);
      return;
    }

    const fetchPositions = async () => {
      try {
        const data = await xanoApi.getTransactions();
        tradesRef.current = data as Trade[];
        const fetchedTrades: Trade[] = tradesRef.current.map((item: any) => {
          // Normalize trade type: "Sold" -> "sell", "Bought" -> "buy"
          let normalizedTradeType = 'other';
          if (item.tradeType) {
            const tradeTypeLower = item.tradeType.toLowerCase();
            if (tradeTypeLower.includes('sold') || tradeTypeLower.includes('sell')) {
              normalizedTradeType = 'sell';
            } else if (tradeTypeLower.includes('bought') || tradeTypeLower.includes('buy')) {
              normalizedTradeType = 'buy';
            }
          }
          
          // Normalize status: "Open" -> "open", "Closed" -> "close"
          let normalizedStatus = 'open';
          if (item.status) {
            const statusLower = item.status.toLowerCase();
            if (statusLower.includes('close')) {
              normalizedStatus = 'close';
            } else if (statusLower.includes('open')) {
              normalizedStatus = 'open';
            }
          }
          
          const mappedItem: Trade = {
            id: item.id,
            Transaction_Date: item.Transaction_Date,
            tradeType: normalizedTradeType,
            Symbol: item.Symbol,
            contractType: item.contractType,
            Quantity: Number(item.Quantity) || 0,
            StrikeDate: item.StrikeDate ?? '',
            StrikePrice: Number(item.StrikePrice) || 0,
            PremiumValue: Number(item.PremiumValue) || 0,
            Book_Cost: Number(item.Book_Cost) || 0,
            Security_Number: item.Security_Number,
            status: normalizedStatus,
          };
          return mappedItem;
        });

        console.log('Fetched trades for position manager:', fetchedTrades.length, 'trades');
        if (fetchedTrades.length > 0) {
          console.log('First trade sample:', {
            id: fetchedTrades[0].id,
            tradeType: fetchedTrades[0].tradeType,
            status: fetchedTrades[0].status,
            Symbol: fetchedTrades[0].Symbol,
            PremiumValue: fetchedTrades[0].PremiumValue,
            Book_Cost: fetchedTrades[0].Book_Cost
          });
        }
        
        const positionManager = new PositionManager(fetchedTrades);
        const calculatedPositions = positionManager.getPositions();
        
        console.log('Calculated positions:', calculatedPositions);
        calculatedPositions.forEach((pos, index) => {
          if (index < 5) { // Log first 5 positions to avoid console spam
            console.log(`Position ${index + 1}:`, {
              id: pos.id,
              ticker: pos.ticker,
              type: pos.type,
              status: pos.status,
              expiration: pos.expiration,
              totalSales: pos.totalSalesBookCost,
              totalPurchases: pos.totalPurchasesBookCost,
              pnl: pos.totalSalesBookCost - pos.totalPurchasesBookCost,
              trades: pos.trades
            });
          }
        });
        
        setPositions(calculatedPositions);
        setAllPositions(calculatedPositions);
      } catch (err) {
        setError((err as Error).message);
      } finally {
        setLoading(false);
      }
    };

    fetchPositions();
  }, []);

  // Filter and sort effect
  React.useEffect(() => {
    let filteredPositions = [...allPositions];

    // Apply year filter
    if (yearFilter !== 'All') {
      filteredPositions = filteredPositions.filter((position) =>
        position.expiration.startsWith(yearFilter)
      );
    }

    // Apply symbol filter
    if (symbolFilter !== 'All') {
      filteredPositions = filteredPositions.filter((position) =>
        position.ticker === symbolFilter
      );
    }

    // Apply sorting
    filteredPositions.sort((a, b) => {
      const aValue = a[sortBy];
      const bValue = b[sortBy];
      
      if (aValue === undefined || bValue === undefined) return 0;
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        const comparison = aValue.localeCompare(bValue);
        return sortOrder === 'asc' ? comparison : -comparison;
      }
      
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        const comparison = aValue - bValue;
        return sortOrder === 'asc' ? comparison : -comparison;
      }
      
      return 0;
    });

    setPositions(filteredPositions);
  }, [allPositions, yearFilter, symbolFilter, sortBy, sortOrder]);

  const handleSort = (field: keyof Position) => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('asc');
    }
  };

  const uniqueYears = React.useMemo(() => {
    return Array.from(new Set(allPositions.map((p) => p.expiration.slice(0, 4)))).sort();
  }, [allPositions]);
  
  const symbols = React.useMemo(() => {
    return Array.from(new Set(allPositions.map((p) => p.ticker))).sort();
  }, [allPositions]);

  if (loading) {
    return (
      <Box sx={{ width: "100%", maxWidth: { sm: "100%", md: "1700px" }, display: "flex", justifyContent: "center", alignItems: "center", height: "50vh" }}>
        <Typography>Loading positions...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ width: "100%", maxWidth: { sm: "100%", md: "1700px" }, display: "flex", justifyContent: "center", alignItems: "center", height: "50vh" }}>
        <Typography color="error">Error: {error}</Typography>
      </Box>
    );
  }
  return (
    <Box sx={{ width: "100%", maxWidth: { sm: "100%", md: "1700px" } }}>
      <Card variant="outlined">
        <CardContent>
          <Typography variant="h5" component="h2" sx={{ mb: 3 }}>
            Active Positions
          </Typography>
          
          {/* Filtering Controls */}
          <Grid container spacing={2} sx={{ mb: 3 }}>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size="small">
                <InputLabel>Filter by Year</InputLabel>
                <Select
                  value={yearFilter}
                  label="Filter by Year"
                  onChange={(e) => setYearFilter(e.target.value)}
                >
                  <MenuItem value="All">All Years</MenuItem>
                  {uniqueYears.map((year) => (
                    <MenuItem key={year} value={year}>
                      {year}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={4}>
              <FormControl fullWidth size="small">
                <InputLabel>Filter by Symbol</InputLabel>
                <Select
                  value={symbolFilter}
                  label="Filter by Symbol"
                  onChange={(e) => setSymbolFilter(e.target.value)}
                >
                  <MenuItem value="All">All Symbols</MenuItem>
                  {symbols.map((symbol) => (
                    <MenuItem key={symbol} value={symbol}>
                      {symbol}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Typography variant="body2" color="text.secondary" sx={{ pt: 1 }}>
                Showing {positions.length} of {allPositions.length} positions
              </Typography>
            </Grid>
          </Grid>
          
          <TableContainer component={Paper} variant="outlined">
            <Table sx={{ minWidth: 650 }} aria-label="active positions table">
              <TableHead>
                <TableRow>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'ticker'}
                      direction={sortBy === 'ticker' ? sortOrder : 'asc'}
                      onClick={() => handleSort('ticker')}
                    >
                      Ticker
                    </TableSortLabel>
                  </TableCell>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'type'}
                      direction={sortBy === 'type' ? sortOrder : 'asc'}
                      onClick={() => handleSort('type')}
                    >
                      Strategy
                    </TableSortLabel>
                  </TableCell>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'strike'}
                      direction={sortBy === 'strike' ? sortOrder : 'asc'}
                      onClick={() => handleSort('strike')}
                    >
                      Strike
                    </TableSortLabel>
                  </TableCell>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'expiration'}
                      direction={sortBy === 'expiration' ? sortOrder : 'asc'}
                      onClick={() => handleSort('expiration')}
                    >
                      Expiration
                    </TableSortLabel>
                  </TableCell>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'openDate'}
                      direction={sortBy === 'openDate' ? sortOrder : 'asc'}
                      onClick={() => handleSort('openDate')}
                    >
                      Open Date
                    </TableSortLabel>
                  </TableCell>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'currentQuantity'}
                      direction={sortBy === 'currentQuantity' ? sortOrder : 'asc'}
                      onClick={() => handleSort('currentQuantity')}
                    >
                      Quantity
                    </TableSortLabel>
                  </TableCell>
                  <TableCell align="right">P/L</TableCell>
                  <TableCell>
                    <TableSortLabel
                      active={sortBy === 'status'}
                      direction={sortBy === 'status' ? sortOrder : 'asc'}
                      onClick={() => handleSort('status')}
                    >
                      Status
                    </TableSortLabel>
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {positions.map((position) => (
                  <TableRow key={position.id}>
                    <TableCell>
                      <Typography fontWeight="medium">{position.ticker}</Typography>
                    </TableCell>
                    <TableCell>{position.type}</TableCell>
                    <TableCell>${position.strike ?? 'N/A'}</TableCell>
                    <TableCell>{position.expiration || 'N/A'}</TableCell>
                    <TableCell>{position.openDate || 'N/A'}</TableCell>
                    <TableCell>{position.currentQuantity ?? 'N/A'}</TableCell>
                    <TableCell align="right">
                      <Typography
                        fontWeight="medium"
                        color={(position.totalSalesBookCost - position.totalPurchasesBookCost) >= 0 ? "success.main" : "error.main"}
                      >
                        {(position.totalSalesBookCost - position.totalPurchasesBookCost) >= 0 ? "+" : ""}${(position.totalSalesBookCost - position.totalPurchasesBookCost).toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={position.status}
                        size="small"
                        color={
                          position.status === "Open" 
                            ? "primary" 
                            : position.status === "Expired" 
                            ? "warning" 
                            : "default"
                        }
                        sx={{
                          backgroundColor: position.status === "Expired" ? "warning.light" : undefined,
                          color: position.status === "Expired" ? "warning.contrastText" : undefined,
                        }}
                      />
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>
    </Box>
  );
}
